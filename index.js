var fs = require('fs')

const createCSV = () => {
  fs.copyFile(`${__dirname}/sample-csv/translations.csv`, `translations.csv`, (err) => {
    if (err) throw err;
    console.log(`/translations.csv was generated.`);
  });
}

const generate = (csvPath, outputPath) => {
  const csv = require('csv-parser')
  const fs = require('fs')
  const results = [];
  const watermark = 'This file was auto-generated by quasar-csv-to-i18n'

  // sanitize csvPath & outputPath
  if (csvPath.startsWith('/')) csvPath = csvPath.substring(1)
  if (outputPath.startsWith('/')) outputPath = outputPath.substring(1)
  
  // read the csv file
  fs.createReadStream(csvPath)
    .pipe(csv())
    .on('data', (data) => results.push(data))
    .on('end', () => {
      // console.log('results: ', results)
  
      // get languages and codes
      let languagesAndCodes = Object.assign({}, results[0])
      delete languagesAndCodes['Key']
      languagesAndCodes = Object.keys(languagesAndCodes)
      
      // generate array of lang, code & codeAsVariable as objects
      let languagesAndCodesAsObjects = []
      
      languagesAndCodes.forEach(languageAndCode => {
        // console.log('languageAndCode: ', languageAndCode)
        let langAndCode = languageAndCode
        let lang = languageAndCode.split(',')[0]
        let code = languageAndCode.split(',')[1].trim()
        let codeAsVariable = code.split('-').join('')
        let languagesAndCodesObject = {
          langAndCode,
          lang,
          code,
          codeAsVariable
        }
        languagesAndCodesAsObjects.push(languagesAndCodesObject)
        
      });
      
      // initialize main index file
      let mainIndexFile = ``
  
      // add watermark
      mainIndexFile += `// ${watermark}\n\n`
  
      // generate main index file import statements
      languagesAndCodesAsObjects.forEach(langObj => {
        mainIndexFile += `import ${langObj.codeAsVariable} from './${langObj.code}' // ${langObj.lang}\n`
      });
  
      // generate main index file export statement
      mainIndexFile += `\n`
      mainIndexFile += `export default { \n`
      languagesAndCodesAsObjects.forEach(langObj => {
        mainIndexFile += `\t'${langObj.code}': ${langObj.codeAsVariable}, // ${langObj.lang}\n`
      });
      mainIndexFile += `}`
  
      // delete the output folder if it exists
      if (fs.existsSync(outputPath)) {
        try {
          fs.rmdirSync(outputPath, { recursive: true });
            // console.log(`${outputPath} is deleted!`);
          } catch (err) {
              console.error(`Error while deleting ${outputPath}.`);
          }
      }
  
      // write the output folder if it doesn't exist
      if (!fs.existsSync(outputPath)){
        fs.mkdirSync(outputPath);
      }
  
      // write the main index file
      fs.writeFile(`${outputPath}/index.js`, mainIndexFile, function(err) {
        if(err) {
          return console.log(err);
        }
        console.log(`${outputPath}/index.js file was saved!`);
  
        // generate individual language folders and index.js files
        languagesAndCodesAsObjects.forEach(langObj => {
          // console.log(langObj)
    
          // create language folder
          if (!fs.existsSync(`${outputPath}/${langObj.code}`)){
            fs.mkdirSync(`${outputPath}/${langObj.code}`);
          }
    
          // generate language index file
          let languageIndexFile = ``
    
          // add language comment to the top
          languageIndexFile += `// ${langObj.lang}, ${langObj.code}\n`
    
          // add watermark
          languageIndexFile += `// ${watermark}\n\n`
    
          // add opening export statement
          languageIndexFile += `export default {\n`
    
          // add translations
          results.forEach(result => {
            // console.log('result', result)
            languageIndexFile += `\t${result.Key}: "${result[langObj.langAndCode]}",\n`
          });
    
          // add closing brace
          languageIndexFile += `}`
    
          // write the language index file
          let languageIndexFilePath = `${outputPath}/${langObj.code}/index.js`
          fs.writeFile(`${languageIndexFilePath}`, languageIndexFile, function(err) {
            if(err) {
              return console.log(err);
            }
            console.log(`${languageIndexFilePath} file was saved!`);
          })
    
        });
      })
  
    })
}

module.exports = {
  createCSV,
  generate
}