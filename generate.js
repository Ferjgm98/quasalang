const fs = require('fs')
const rimraf = require('rimraf')
const csv = require('csv-parser')

const { prompt } = require('inquirer')

require('./utils/getLanguagesAndCodesAsObjects.js')();

module.exports = function() { 
  this.generate = function(options) {
    let csvPath = options.input
    let outputPath = options.output
    let forceWrite = options.force
    let noWatermark = options.nowatermark

    let results = [];
    const watermark = 'This file was auto-generated by quasalang'
    let filesWrittenMessage = []
  
    // sanitize csvPath & outputPath
    if (csvPath.startsWith('/')) csvPath = csvPath.substring(1)
    if (outputPath.startsWith('/')) outputPath = outputPath.substring(1)
    
    // read the csv file
    fs.createReadStream(csvPath)
      .pipe(csv())
      .on('data', (data) => results.push(data))
      .on('end', () => {
    
        let languagesAndCodesAsObjects = getLanguagesAndCodesAsObjects(results)
        
        // initialize main index file
        let mainIndexFile = ``
    
        // add watermark
        if (!noWatermark) {
          mainIndexFile += `// ${watermark}\n\n`
        }
    
        // generate main index file import statements
        languagesAndCodesAsObjects.forEach(langObj => {
          mainIndexFile += `import ${langObj.codeAsVariable} from './${langObj.code}'\n`
        });
    
        // generate main index file export statement
        mainIndexFile += `\n`
        mainIndexFile += `export default { \n`
        languagesAndCodesAsObjects.forEach(langObj => {
          mainIndexFile += `\t'${langObj.code}': ${langObj.codeAsVariable}, // ${langObj.lang}\n`
        });
        mainIndexFile += `}`
    
        // check if output folder exists & prompt to confirm
        if (fs.existsSync(outputPath)) {
          if (!forceWrite) {
            prompt([
              {
                type: 'confirm',
                name: 'confirmDeleteOutputFolder',
                message: `Folder ${outputPath} exists. Overwrite it?`
              }
            ]).then(answers => {
              if (answers.confirmDeleteOutputFolder) {
                console.log('INFO: Skip this prompt in future with the --force (or -f) option.')
                deleteOutputFolder()
              }
            })
          }
          else {
            deleteOutputFolder()
          }
        }
        else {
          writeFiles()
        }

        // delete the output folder if it exists
        function deleteOutputFolder() {
          if (fs.existsSync(outputPath)) {
            // try {
              // fs.rmdirSync(outputPath, { recursive: true });
              //   writeFiles()
              // } catch (err) {
              //     console.error(`Error while deleting ${outputPath}.`);
              //     console.error(err)
              // }
              rimraf(outputPath, function (err) { 
                if (err) {
                  console.error(`Error while deleting ${outputPath}.`);
                  console.error(err)
                }
                else {
                  writeFiles()
                }
              })
          }
          else {
            writeFiles()
          }
        }
    
        // write files
        function writeFiles() {
          // write the output folder if it doesn't exist
          if (!fs.existsSync(outputPath)){
            fs.mkdirSync(outputPath, { recursive: true });
          }
      
          // write the main index file
          fs.writeFile(`${outputPath}/index.js`, mainIndexFile, function(err) {
            if(err) {
              return console.log(err);
            }
            filesWrittenMessage.push({ 
              'File': 'Main index file',
              'Code': '',
              'Path': `${outputPath}/index.js`,
            })
      
            // generate individual language folders and index.js files
            let languageFilesWritten = 0
            languagesAndCodesAsObjects.forEach(langObj => {
        
              // create language folder
              if (!fs.existsSync(`${outputPath}/${langObj.code}`)){
                fs.mkdirSync(`${outputPath}/${langObj.code}`);
              }
        
              // generate language index file
              let languageIndexFile = ``
        
              // add language comment to the top
              languageIndexFile += `// ${langObj.lang}, ${langObj.code}`
        
              // add watermark
              if (!noWatermark) {
                languageIndexFile += `\n// ${watermark}`
              }
             
              // add blank lines
              languageIndexFile += `\n\n`
        
              // add opening export statement
              languageIndexFile += `export default {\n`
        
              // add translations
              results.forEach(result => {
                // row is not empty
                if (result.Key) {
                  // add a comment if csv row is a comment
                  if (result.Key.startsWith('#')) {
                    languageIndexFile += `\t// ${result.Key.substring(1).trim()}\n`
                  }
                  // or just add the phrase key pair
                  else {
                    languageIndexFile += `\t`
                    let phraseKeyPair = `${result.Key}: "${result[langObj.langAndCode]}",`
                    // if no phrase provided, comment it out
                    if (!result[langObj.langAndCode]) {
                      phraseKeyPair = `// ${phraseKeyPair} // no phrase provided - fallback to default`
                    }
                    languageIndexFile += phraseKeyPair
                    languageIndexFile += `\n`
                  }
                }
                // row is empty, add a blank line
                else {
                  languageIndexFile += `\n`
                }
              });
        
              // add closing brace
              languageIndexFile += `}`
        
              // write the language index file
              let languageIndexFilePath = `${outputPath}/${langObj.code}/index.js`
              fs.writeFile(`${languageIndexFilePath}`, languageIndexFile, function(err) {
                if(err) {
                  return console.log(err);
                }
                filesWrittenMessage.push({ 
                  'File': `${langObj.lang}`,
                  'Code': `${langObj.code}`,
                  'Path': `${languageIndexFilePath}`,
                })
                languageFilesWritten++
                if (languageFilesWritten === languagesAndCodesAsObjects.length) {
                  logWriteMessages()
                }
              })
        
            });
          })
        }

        // log write messages
        function logWriteMessages() {
          console.log(`\nWrote ${filesWrittenMessage.length} files:`)
          console.table(filesWrittenMessage)
        }
    
      })
  }
}